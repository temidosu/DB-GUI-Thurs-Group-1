{"ast":null,"code":"var _jsxFileName = \"/home/simon/Documents/Code_Projects/Mask/Homework/Lab/DB-GUI-Thurs-Group-1/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ROUTES } from './routes'; // React functional component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // state for storage of the information on the webpage of forms and list, uses hooks\n  const [number, setNumber] = useState(\"\");\n  const [values, setValues] = useState([]); // ENTER YOUR EC2 PUBLIC IP/URL HERE\n\n  const ec2_url = ''; // CHANGE THIS TO TRUE IF HOSTING ON EC2, MAKE SURE TO ADD IP/URL ABOVE\n\n  const ec2 = false; // USE localhost OR ec2_url ACCORDING TO ENVIRONMENT\n\n  const url = ec2 ? ec2_url : 'localhost'; // handle input field state change\n\n  const handleChange = e => {\n    setNumber(e.target.value);\n  };\n\n  const fetchBase = () => {\n    axios.get(`http://${url}:8000/`).then(res => {\n      alert(res.data);\n    });\n  }; // fetches vals of db via GET request\n\n\n  const fetchVals = () => {\n    axios.get(`http://${url}:8000/values`).then(res => {\n      const values = res.data.data;\n      console.log(values);\n      setValues(values);\n    }).catch(err => {\n      console.log(err);\n    });\n  }; // handle input form submission to backend via POST request\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let prod = number * number;\n    axios.post(`http://${url}:8000/multplynumber`, {\n      product: prod\n    }).then(res => {\n      console.log(res);\n      fetchVals();\n    }).catch(err => {\n      console.log(err);\n    });\n    ;\n    setNumber(\"\");\n  }; // handle intialization and setup of database table, can reinitialize to wipe db\n\n\n  const reset = () => {\n    axios.post(`http://${url}:8000/reset`).then(res => {\n      console.log(res);\n      fetchVals();\n    }).catch(err => {\n      console.log(err);\n    });\n    ;\n  }; // tell app to fetch values from db on first load (if initialized)\n\n\n  useEffect(() => {\n    fetchVals();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: ROUTES.map((route, index) => /*#__PURE__*/_jsxDEV(Route, { ...route\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 42\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"rNsIyDz84xUT/4AeR0vAHzRA6RM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/simon/Documents/Code_Projects/Mask/Homework/Lab/DB-GUI-Thurs-Group-1/frontend/src/App.js"],"names":["React","useEffect","useState","axios","BrowserRouter","Router","Route","Switch","ROUTES","App","number","setNumber","values","setValues","ec2_url","ec2","url","handleChange","e","target","value","fetchBase","get","then","res","alert","data","fetchVals","console","log","catch","err","handleSubmit","preventDefault","prod","post","product","reset","map","route","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ROUTES } from './routes';\n\n// React functional component\nfunction App () {\n  // state for storage of the information on the webpage of forms and list, uses hooks\n  const [number, setNumber] = useState(\"\")\n  const [values, setValues] = useState([])\n\n  // ENTER YOUR EC2 PUBLIC IP/URL HERE\n  const ec2_url = ''\n  // CHANGE THIS TO TRUE IF HOSTING ON EC2, MAKE SURE TO ADD IP/URL ABOVE\n  const ec2 = false;\n  // USE localhost OR ec2_url ACCORDING TO ENVIRONMENT\n  const url = ec2 ? ec2_url : 'localhost'\n\n  // handle input field state change\n  const handleChange = (e) => {\n    setNumber(e.target.value);\n  }\n\n  const fetchBase = () => {\n    axios.get(`http://${url}:8000/`).then((res)=>{\n      alert(res.data);\n    })\n  }\n\n  // fetches vals of db via GET request\n  const fetchVals = () => {\n    axios.get(`http://${url}:8000/values`).then(\n      res => {\n        const values = res.data.data;\n        console.log(values);\n        setValues(values)\n    }).catch(err => {\n      console.log(err)\n    });\n  }\n\n  // handle input form submission to backend via POST request\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let prod = number * number;\n    axios.post(`http://${url}:8000/multplynumber`, {product: prod}).then(res => {\n      console.log(res);\n      fetchVals();\n    }).catch(err => {\n      console.log(err)\n    });;\n    setNumber(\"\");\n  }\n\n  // handle intialization and setup of database table, can reinitialize to wipe db\n  const reset = () => {\n    axios.post(`http://${url}:8000/reset`).then(res => {\n      console.log(res);\n      fetchVals();\n    }).catch(err => {\n      console.log(err)\n    });;\n  }\n\n  // tell app to fetch values from db on first load (if initialized)\n  useEffect(() => {\n    fetchVals();\n  }, [])\n\n  return (\n    <>\n      <Router>\n        <Switch>\n          { ROUTES.map((route, index) => <Route key={index} { ...route } />) }\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}