{"ast":null,"code":"var _jsxFileName = \"/home/simon/Documents/Code_Projects/Mask/Homework/Lab/DB-GUI-Thurs-Group-1/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios'; // React functional component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // state for storage of the information on the webpage of forms and list, uses hooks\n  const [number, setNumber] = useState(\"\");\n  const [values, setValues] = useState([]); // ENTER YOUR EC2 PUBLIC IP/URL HERE\n\n  const ec2_url = ''; // CHANGE THIS TO TRUE IF HOSTING ON EC2, MAKE SURE TO ADD IP/URL ABOVE\n\n  const ec2 = false; // USE localhost OR ec2_url ACCORDING TO ENVIRONMENT\n\n  const url = ec2 ? ec2_url : 'localhost'; // handle input field state change\n\n  const handleChange = e => {\n    setNumber(e.target.value);\n  };\n\n  const fetchBase = () => {\n    axios.get(`http://${url}:8000/`).then(res => {\n      alert(res.data);\n    });\n  }; // fetches vals of db via GET request\n\n\n  const fetchVals = () => {\n    axios.get(`http://${url}:8000/values`).then(res => {\n      const values = res.data.data;\n      console.log(values);\n      setValues(values);\n    }).catch(err => {\n      console.log(err);\n    });\n  }; // handle input form submission to backend via POST request\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let prod = number * number;\n    axios.post(`http://${url}:8000/multplynumber`, {\n      product: prod\n    }).then(res => {\n      console.log(res);\n      fetchVals();\n    }).catch(err => {\n      console.log(err);\n    });\n    ;\n    setNumber(\"\");\n  }; // handle intialization and setup of database table, can reinitialize to wipe db\n\n\n  const reset = () => {\n    axios.post(`http://${url}:8000/reset`).then(res => {\n      console.log(res);\n      fetchVals();\n    }).catch(err => {\n      console.log(err);\n    });\n    ;\n  }; // tell app to fetch values from db on first load (if initialized)\n\n\n  useEffect(() => {\n    fetchVals();\n  }, [fetchVals]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchBase,\n        style: {\n          marginBottom: '1rem'\n        },\n        children: [\" \", `GET: http://${url}:8000/`, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: reset,\n        children: \" Reset DB \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: number,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: values.map((value, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: value.value\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 38\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rNsIyDz84xUT/4AeR0vAHzRA6RM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/simon/Documents/Code_Projects/Mask/Homework/Lab/DB-GUI-Thurs-Group-1/frontend/src/App.js"],"names":["React","useEffect","useState","axios","App","number","setNumber","values","setValues","ec2_url","ec2","url","handleChange","e","target","value","fetchBase","get","then","res","alert","data","fetchVals","console","log","catch","err","handleSubmit","preventDefault","prod","post","product","reset","marginBottom","map","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;;;AACA,SAASC,GAAT,GAAgB;AAAA;;AACd;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC,CAHc,CAKd;;AACA,QAAMO,OAAO,GAAG,EAAhB,CANc,CAOd;;AACA,QAAMC,GAAG,GAAG,KAAZ,CARc,CASd;;AACA,QAAMC,GAAG,GAAGD,GAAG,GAAGD,OAAH,GAAa,WAA5B,CAVc,CAYd;;AACA,QAAMG,YAAY,GAAIC,CAAD,IAAO;AAC1BP,IAAAA,SAAS,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACD,GAFD;;AAIA,QAAMC,SAAS,GAAG,MAAM;AACtBb,IAAAA,KAAK,CAACc,GAAN,CAAW,UAASN,GAAI,QAAxB,EAAiCO,IAAjC,CAAuCC,GAAD,IAAO;AAC3CC,MAAAA,KAAK,CAACD,GAAG,CAACE,IAAL,CAAL;AACD,KAFD;AAGD,GAJD,CAjBc,CAuBd;;;AACA,QAAMC,SAAS,GAAG,MAAM;AACtBnB,IAAAA,KAAK,CAACc,GAAN,CAAW,UAASN,GAAI,cAAxB,EAAuCO,IAAvC,CACEC,GAAG,IAAI;AACL,YAAMZ,MAAM,GAAGY,GAAG,CAACE,IAAJ,CAASA,IAAxB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;AACAC,MAAAA,SAAS,CAACD,MAAD,CAAT;AACH,KALD,EAKGkB,KALH,CAKSC,GAAG,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,KAPD;AAQD,GATD,CAxBc,CAmCd;;;AACA,QAAMC,YAAY,GAAId,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACe,cAAF;AACA,QAAIC,IAAI,GAAGxB,MAAM,GAAGA,MAApB;AACAF,IAAAA,KAAK,CAAC2B,IAAN,CAAY,UAASnB,GAAI,qBAAzB,EAA+C;AAACoB,MAAAA,OAAO,EAAEF;AAAV,KAA/C,EAAgEX,IAAhE,CAAqEC,GAAG,IAAI;AAC1EI,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACAG,MAAAA,SAAS;AACV,KAHD,EAGGG,KAHH,CAGSC,GAAG,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,KALD;AAKG;AACHpB,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAVD,CApCc,CAgDd;;;AACA,QAAM0B,KAAK,GAAG,MAAM;AAClB7B,IAAAA,KAAK,CAAC2B,IAAN,CAAY,UAASnB,GAAI,aAAzB,EAAuCO,IAAvC,CAA4CC,GAAG,IAAI;AACjDI,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACAG,MAAAA,SAAS;AACV,KAHD,EAGGG,KAHH,CAGSC,GAAG,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD,KALD;AAKG;AACJ,GAPD,CAjDc,CA0Dd;;;AACAzB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAEN,SAAjB;AAA4B,QAAA,KAAK,EAAE;AAACiB,UAAAA,YAAY,EAAE;AAAf,SAAnC;AAAA,wBAA8D,eAActB,GAAI,QAAhF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEqB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAM,QAAA,QAAQ,EAAEL,YAAhB;AAAA,gCACE;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,KAAK,EAAEtB,MAA1B;AAAkC,UAAA,QAAQ,EAAEO;AAA5C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAQE;AAAA,kBACIL,MAAM,CAAC2B,GAAP,CAAW,CAACnB,KAAD,EAAQoB,CAAR,kBAAc;AAAA,oBAAapB,KAAK,CAACA;AAAnB,WAASoB,CAAT;AAAA;AAAA;AAAA;AAAA,gBAAzB;AADJ;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA/EQ/B,G;;KAAAA,G;AAiFT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\n// React functional component\nfunction App () {\n  // state for storage of the information on the webpage of forms and list, uses hooks\n  const [number, setNumber] = useState(\"\")\n  const [values, setValues] = useState([])\n\n  // ENTER YOUR EC2 PUBLIC IP/URL HERE\n  const ec2_url = ''\n  // CHANGE THIS TO TRUE IF HOSTING ON EC2, MAKE SURE TO ADD IP/URL ABOVE\n  const ec2 = false;\n  // USE localhost OR ec2_url ACCORDING TO ENVIRONMENT\n  const url = ec2 ? ec2_url : 'localhost'\n\n  // handle input field state change\n  const handleChange = (e) => {\n    setNumber(e.target.value);\n  }\n\n  const fetchBase = () => {\n    axios.get(`http://${url}:8000/`).then((res)=>{\n      alert(res.data);\n    })\n  }\n\n  // fetches vals of db via GET request\n  const fetchVals = () => {\n    axios.get(`http://${url}:8000/values`).then(\n      res => {\n        const values = res.data.data;\n        console.log(values);\n        setValues(values)\n    }).catch(err => {\n      console.log(err)\n    });\n  }\n\n  // handle input form submission to backend via POST request\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let prod = number * number;\n    axios.post(`http://${url}:8000/multplynumber`, {product: prod}).then(res => {\n      console.log(res);\n      fetchVals();\n    }).catch(err => {\n      console.log(err)\n    });;\n    setNumber(\"\");\n  }\n\n  // handle intialization and setup of database table, can reinitialize to wipe db\n  const reset = () => {\n    axios.post(`http://${url}:8000/reset`).then(res => {\n      console.log(res);\n      fetchVals();\n    }).catch(err => {\n      console.log(err)\n    });;\n  }\n\n  // tell app to fetch values from db on first load (if initialized)\n  useEffect(() => {\n    fetchVals();\n  }, [fetchVals])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={fetchBase} style={{marginBottom: '1rem'}}> {`GET: http://${url}:8000/`} </button>\n        <button onClick={reset}> Reset DB </button>\n        <form onSubmit={handleSubmit}>\n          <input type=\"text\" value={number} onChange={handleChange}/>\n          <br/>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <ul>\n          { values.map((value, i) => <li key={i}>{value.value}</li>) }\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}